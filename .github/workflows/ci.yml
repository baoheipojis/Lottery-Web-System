name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      # 设置 MySQL 服务容器用于集成测试
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: lottery_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置 JDK 21 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      # 创建测试配置文件
      - name: Create test application.properties
        run: |
          mkdir -p lottery/src/test/resources
          cat > lottery/src/test/resources/application-test.properties << EOF
          spring.datasource.url=jdbc:mysql://localhost:3306/lottery_test?useSSL=false&serverTimezone=Asia/Shanghai
          spring.datasource.username=test
          spring.datasource.password=test
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Shanghai
          EOF

      # 运行后端单元测试
      - name: Run backend unit tests
        working-directory: ./lottery
        run: mvn test -Dtest='*Test' -DexcludeGroups="integration"

      # 运行后端集成测试
      - name: Run backend integration tests
        working-directory: ./lottery
        run: mvn test -Dtest='*IntegrationTest'

      # 打包项目（如果需要）
      - name: Package backend application
        working-directory: ./lottery
        run: mvn package -DskipTests

  # frontend-tests:
  #   name: Frontend Tests
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     # 检出代码
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
  #     # 设置 Node.js 环境
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
  #         cache-dependency-path: './frontend/my-project/package-lock.json'
          
  #     # 安装依赖
  #     - name: Install dependencies
  #       working-directory: ./frontend/my-project
  #       run: npm ci
      
  #     # 运行 Lint 检查（如果有配置）
  #     - name: Run linter
  #       working-directory: ./frontend/my-project
  #       run: npm run lint --if-present
        
  #     # 运行前端单元测试
  #     - name: Run frontend unit tests
  #       working-directory: ./frontend/my-project
  #       run: npm test
      
  #     # 构建前端项目
  #     - name: Build frontend
  #       working-directory: ./frontend/my-project
  #       run: npm run build --if-present
        
  #     # 运行端到端测试
  #     - name: Run end-to-end tests
  #       uses: cypress-io/github-action@v5
  #       with:
  #         working-directory: ./frontend/my-project
  #         build: npm run build
  #         start: npm run serve
  #         wait-on: 'http://localhost:8080'
  #         browser: chrome
  #         headless: true

  # # 可选：添加代码覆盖率报告作业
  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests, frontend-tests]
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
  #     # 设置 JDK 环境（用于 JaCoCo）
  #     - name: Set up JDK 21
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'
          
  #     # 后端代码覆盖率
  #     - name: Generate backend coverage
  #       working-directory: ./lottery
  #       run: mvn jacoco:prepare-agent test jacoco:report
        
  #     # 上传后端覆盖率报告
  #     - name: Upload backend coverage report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: backend-coverage-report
  #         path: ./lottery/target/site/jacoco
          
  #     # 设置 Node.js 环境（用于前端覆盖率）
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
          
  #     # 前端代码覆盖率
  #     - name: Generate frontend coverage
  #       working-directory: ./frontend/my-project
  #       run: npm test -- --coverage
        
  #     # 上传前端覆盖率报告
  #     - name: Upload frontend coverage report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: frontend-coverage-report
  #         path: ./frontend/my-project/coverage
